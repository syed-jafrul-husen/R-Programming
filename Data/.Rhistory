library(pheatmap)
?pheatmap
#make a dataframe/matrix
head(mtcars)
class(mtcars)
df = scale(mtcars)
pheatmap(df)
pheatmap(df, border_color = "red")
pheatmap(df, border_color = "black")
pheatmap(df,
border_color = "red",
cellwidth = 15)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = F)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = F)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = T,
fontsize = 15)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = T,
fontsize = 7)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = T,
fontsize = 5)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = T,
fontsize = 7)
pheatmap(df,
border_color = "red",
cellwidth = 15,
cluster_rows = T,
cutree_rows = 3,
show_rownames = T,
fontsize = 7,
display_numbers = T)
#
pheatmap(mtcars)
#
pheatmap(mtcars)
if(FALSE){
"We use scaling when the difference between
dataframe value is higher and we can't
see anything if we display the heapmat pattern"
}
pheatmap(mtcars, scale="column")
install.packages("ggplot2")
library(ggplot2)
?ggplot2
head(mpg)
d = mpg()
d = data.frame(mpg)
View(d)
ggplot(mpg, aes(displ,hwy))
class(mpg)
ggplot(mpg, aes(displ,hwy))
ggplot(mpg, aes(displ,hwy)) +
geom_point()
View(d)
View(d)
ggplot(mpg, aes(displ,hwy), color=class) +
geom_point()
ggplot(mpg, aes(displ, hwy, color=class) ) +
geom_point()
#
ggplot(mpg, aes(displ, hwy, color=trans)) +
geom_point()
#
ggplot(mpg, aes(dspl, cty, color=trans)) +
geom_point()
#
ggplot(mpg, aes(displ, cty, color=trans)) +
geom_point()
#
df = data.frame(col1=1:3, col2=c(1,4,2))
ggplot(df, aes(col1,col2))=
geom_point()
ggplot(df, aes(col1,col2)) +
geom_point()
ggplot(df, aes(col1,col2)) +
geom_line()
ggplot(df, aes(x = col2, y = col1)) =
geom_line()
ggplot(df, aes(x = col2, y = col1)) +
geom_line()
ggplot(df, aes(x = col2, y = col1)) +
geom_line() +
geom_point()
ggplot(df, aes(col2, clo1)) +
geom_point() +
geom_line(size = 2)
ggplot(df, aes(col2, col1)) +
geom_point() +
geom_line(size = 2)
ggplot(df, aes(col2, col1)) +
geom_point() +
geom_line(size = 2, color="red")
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(gapminder)
library(tidyverse)
library(gapminder)
head(gapminder)
#bar
ggplot(gapminder, eas(continent)) +
geom_bar()
#bar
ggplot(gapminder, aes(continent)) +
geom_bar()
#Use of pipe in ggplot
gapminder %>%
filter(year = 1952)
#Use of pipe in ggplot
gapminder %>%
filter(year == 1952)
gapminder %>%
filter(year == 1952) %>%
ggplot(gapminder, aes(continent)) +
geom_bar()
gapminder %>%
filter(year == 1952)
gapminder %>%
filter(year == 1952) %>%
ggplot(gapminder, aes(continent)) +
geom_bar()
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(continent)) +
geom_bar()
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(continent, pop)) +
geom_bar(stat = "identity")
gapminder %>%
filter(year == 1952) %>%
ggplot(aes(continent, pop)) +
geom_col()
#Stacked bar
gapminder %>%
filter(year>=1952 & year<=1970) %>%
ggplot(aes(year,pop)) +
geom_bar(stat = "identity")
#if we want to know population per year by separating continent
gapminder %>%
filter(year>=1952 & year<=1970) %>%
ggplot(aes(year,pop)) +
geom_bar(stat = "identity", aes(fill=continent))
library(tidyverse)
library(gapminder)
source("G:/All/R programming/Basic - 1/Lecture-16.R", echo=TRUE)
head(gapminder)
#boxplot
ggplot(gapminder, aes(continent, lifeExp)) +
geom_boxplot()
library(tidyverse)
library(gapminder)
head(gapminder)
#boxplot
ggplot(gapminder, aes(continent, lifeExp)) +
geom_boxplot()
#violin
ggplot(gapminder, aes(continent, lifeExp)) +
geom_violin()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp), color = continent) +
geom_violin(draw_quantiles = c(.20, .40, .60 .80))
ggplot(gapminder, aes(continent, lifeExp), color = continent) +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp, color = continent) ) +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder. aes(continent, lifeExp, fill = continent)) +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp, fill = continent) ) +
geom_violin(draw_quantiles = c(.25, .5, .75))
#jitter
ggplot(gapminder, aes(continent, lifeExp))+
geom_gitter()
#jitter
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter()
#jitter
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_violin(draw_quantiles = c(.25, .5, .75))
#jitter
ggplot(gapminder, aes(continent, lifeExp) )+
geom_jitter()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp))+
geom_violin(draw_quantiles = c(.25, .5, .75)) +
geom_jitter()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitt() +
geom_violin((draw_quantiles = c(.25, .5, .75)))
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_violin((draw_quantiles = c(.25, .5, .75)))
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha = 2) +
geom_violin(draw_quantiles = c(.25, .5, .75))
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha = .2) +
geom_violin(draw_quantiles = c(.25, .5, .75))
#sorting according to highest meadian
gapminder$continent = factor(gapminder$continent, levels=c("Oceania", "Europe", "Americas", "Asia", "Africa"))
library(tidyverse)
library(gapminder)
head(gapminder)
#facet
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point()
#facet
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point() +
facet_grid(.~continent)
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point() +
facet_grid(continent~.)
#facet_wrap()
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point() +
facet_wrap()
#facet_wrap()
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point() +
facet_wrap(~.continent)
#facet_wrap()
ggplot(gapminder, aes(lifeExp, gdpPercap)) +
geom_point() +
facet_wrap(.~continent)
#coordinate flip
ggplot(gapminder, aes(continent, lfeExp)) +
geom_boxplot() +
coord_flip()
#coordinate flip
ggplot(gapminder, aes(continent, lfeExp)) +
geom_boxplot() +
coord_flip()
#coordinate flip
ggplot(gapminder, aes(continent, lifeExp)) +
geom_boxplot() +
coord_flip()
#theme
ggplot(gapminder, aes(continent, lifeExp, fill = continent)) +
geom_boxplot() +
theme_classic()
ggplot(gapminder, aes(continent, lifeExp, fill = continent)) +
geom_boxplot() +
theme_bw()
ggplot(gapminder, aes(continent, lifeExp, fill = continent)) +
geom_boxplot() +
theme_dark()
library(tidyverse)
library(gapminder)
head(gapminder)
#make scatter plot
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point()
#make scatter plot
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point()
#log transformation value
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
scale_x_log10()
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point()
#Change color in scatter
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(aes(color=continent))
#change size of point
ggplot(gapminder, aes(log10*gdpPercap), lifeExp) +
geom_point(aes(color = continent, size = 3))
#change size of point
ggplot(gapminder, aes(log10*gdpPercap), lifeExp) +
geom_point(aes(color = continent), size = 3)
#change size of point
ggplot(gapminder, aes(log10*gdpPercap), lifeExp) +
geom_point(aes(color = continent), size = 3)
#change size of point
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(aes(color = continent), size = 3)
#change some other parameter in scatter plot
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch=17, size = 2, aes(color = continent))
#change some other parameter in scatter plot
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch=17, size = 2, alpha = .8, aes(color = continent))
ggplot(gapminder, aes(log10(gapminder), lifeExp)) +
geom_point(pch = 17)
ggplot(gapminder, aes(log10(gapminder), lifeExp)) +
geom_point(pch = 17, color = red)
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch = 17, color = red)
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch = 17, color = "red")
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch = 17, color = "red", alpha = .8)
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(pch = 17, color = "red", alpha = .8, size = 2)
#use smoothing function
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
geom_smooth()
#Specify the method of smoothing
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
geom_smooth(lwd = 2, se = FALSE, method="lm", col="blue")
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
geom_smooth(aes(color=continent))
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point(aes(color=continent)) +
geom_smooth(aes(color="continent"))
#Example of faecting
ggplot(gapminder, aes(gdpPercap), lifeExp) +
geom_point() +
facet_wrap(~continent)
#Example of faceting
ggplot(gapminder, aes(gdpPercap), lifeExp) +
geom_point() +
facet_wrap(~continent)
#Example of faceting
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
facet_wrap(~continent)
#Change faceting by column
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
facet_wrap(~continent, ncol=1)
# Change faceting by row
ggplot(gapminder, aes(log10(gdpPercap), lifeExp)) +
geom_point() +
facet_wrap(~continent, nrow=1)
#boxplot and jitter
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_boxplot()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_boxplot()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_boxplot()
geom_boxplot(fill=continent)
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_boxplot(fill=continent)
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_boxplot()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_boxplot(aes(fill=continent))
# violin and jitter
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter() +
geom_violin()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jotter(1/2) +
geom_violin()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jotter(alpha=1/2) +
geom_violin()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_violin()
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_violin(fill=continent)
ggplot(gapminder, aes(continent, lifeExp)) +
geom_jitter(alpha=1/2) +
geom_violin(aes(fill=continent))
#histograms
ggplot(gapminder, aes(lifeExp)) +
geom_histogram()
#change binsize
ggplot(gapminder, aes(lifeExp)) +
geom_histogram(bins=50)
ggplot(gapminder, aes(lifeExp)) +
geom_histogram(bins=100)
ggplot(gapminder, aes(lifeExp)) +
geom_histogram(bins=500)
ggplot(gapminder, aes(lifeExp)) +
geom_histogram(aes(color=continent))
ggplot(gapminder, aes(lifeExp)) +
geom_histogram(aes(fill=continent))
#density plot
ggplot(gapminder, aes(lifeExp)) +
geom_density()
ggplot(gapminder, aes(lifeExp)) +
geom_density(aes(fill="red"))
### install.packages("dendextend")
library(dendextend)
setwd("G:/All/R programming/Data")
x = read.table("Leukemia_Carcinoma.tsv", header=T, fill=T)
dim(x)
#For hierarchical clustering we can't use missing value otherwise it will show error
cl = na.omit(x2)
x2 = x[,3:8] #we are getting all the row and column from 3 to 8
#For hierarchical clustering we can't use missing value otherwise it will show error
cl = na.omit(x2)
dim(cl)
?hclust
d = as.dendrogram(hc)
hc <- hclust(as.dist(1-cor(cl[,1:ncol(cl)], method="spearman")), method="complete")
d = as.dendrogram(hc)
plot(d)
#Now the result may get worst if I use pearson method
hc <- hclust(as.dist(1-cor(cl[,1:ncol(cl)], method="pearson")), method="complete")
d = as.dendrogram(hc)
plot(d)
# so we should use proper method for clustering.
# for example for gene expression we can't use pearson method we must use spearman method
hc <- hclust(as.dist(1-cor(cl[,1:ncol(cl)], method="spearman")), method="complete")
hc <- hclust(as.dist(1-cor(cl[,1:ncol(cl)], method="spearman")), method="complete")
d = as.dendrogram(hc)
plot(d)
#make colorful plot
d <- d %>% color_branches(k=2) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "black")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=3) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "black")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=10) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "black")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=2) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 5) %>%
set("leaves_col", "black")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=2) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "red")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=2) %>%
set("branches_lwd",2) %>%
set("labels_col", c("red")) %>%
set("leaves_pch", 19) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "black")
plot(d, horiz=F)
#make colorful plot
d <- d %>% color_branches(k=2) %>%
set("branches_lwd",2) %>%
set("labels_col", c("black")) %>%
set("leaves_pch", 39) %>%
set("leaves_cex", 1) %>%
set("leaves_col", "black")
plot(d, horiz=F)
